<!doctype html> 
<html lang="en"> 
<head> 
	<meta charset="UTF-8" />
	<title>Phaser - Getting started</title>
	<script type="text/javascript" src="js/phaser.js"></script>
    <style type="text/css">
        body {
            margin: 0;
        }
    </style>
</head>
<body>

<script src="http://localhost:8120/socket.io/socket.io.js"></script>
<script type="text/javascript">
var socket;  
var batsman=0,bowler=0;
var past_time;
var game = new Phaser.Game(1000, 600, Phaser.AUTO, 'phaser-example', { preload: preload, create: create, update: update });

function preload() {

    game.load.image('pad', 'assets/pad.jpg');
    game.load.image('ball', 'assets/firstaid.png');
    game.load.image('sky', 'assets/sky.png');
    game.load.image('shoe', 'assets/shoe.jpg');
    game.load.image('thigh_pad', 'assets/thigh_pad.jpg');
    game.load.image('t_shirt3', 'assets/t_shirt3.jpg');
    game.load.image('shoulder', 'assets/shoulder.png');
    game.load.image('arm', 'assets/shoulder.png');
    game.load.image('bat', 'assets/bat.jpg');
    game.load.image('star', 'assets/star.png');
    game.load.image('wicket', 'assets/wicket.jpg');
    game.load.image('wicket_dislodged', 'assets/wicket_dislodged.jpg');

}
var cursors;
var sprites = {};
var mouseSprite = null;
var materials = {}
var gameover=0,ballText,gameText,no_of_balls=0,is_bat_added=0,round=0,delta=0.1;
var ballVelX,ballVelY,simulation_started,simulationIndex,simulationMatrix;
var ballTrajectory, ballTrajectoryIndex;
var collisionBallWithGround;
var bowl;
function rads(deg) {
  return deg*3.1416/180;
}

function repeat(func, interval) {
  function go() {
    func();
    setTimeout(go, interval);
  }
  go();
}

//state of the match
STATIC=0;
BOWLED=1;
BOWL_RECEIVED=2;
SIMULATION=3;
SIMULATION_RECEIVED=4;
GAME_FINISHED=5;
BALL_PITCHING=6;

var state=STATIC;
// collision groups
C_BAT = 1;
C_BALL = 2;
C_GROUND = 4;
C_WICKET=8;

NO_OF_DELIVIRIES=2;

OX = 150;   // position of back shoe - x
OY = 500;   // position of back shoe - y
OWX=15;
OWY=435;
DBL = 200;  // distance between shoes

SCALE = 100;
var lowerLegSize = 1.05*SCALE,
    upperLegSize = 1.05*SCALE,
    spineSize = 1.36*SCALE,
    upperArmSize = 0.78*SCALE,
    lowerArmSize = 0.78*SCALE,
    tboneSize = 0.8*SCALE,
    tboneLSize = 0*SCALE,
    batSize = 1.75*SCALE,
    batSizeW = 0.3*SCALE;

var skeleton = {
  lowerLeftLeg: {
    assetKey: 'pad',
    length: lowerLegSize,
    position: {
      x: OX+DBL,
      y: OY,
      angle: rads(-90)
    }
  },
  lowerRightLeg: {
    assetKey: 'pad',
    length: lowerLegSize,
    position: {
      x: OX,
      y: OY,
      angle: rads(-90)
    }
  },
  upperLeftLeg: {
    assetKey: 'thigh_pad',
    length: upperLegSize,
    position: {
      x: OX+DBL,
      y: OY-lowerLegSize,
      angle: rads(-90)
    }
  },
  upperRightLeg: {
    assetKey: 'thigh_pad',
    length: upperLegSize,
    position: {
      x: OX,
      y: OY-lowerLegSize,
      angle: rads(-90)
    }
  },
  spine: {
    assetKey: 't_shirt3',
    length: spineSize,
    position: {
      x: OX+DBL/2,
      y: OY-(lowerLegSize+upperLegSize),
      angle: rads(-90)
    }
  },
  lowerLeftArm: {
    assetKey: 'shoulder',
    length: lowerArmSize,
    position: {
      x: OX+DBL,
      y: OY-(lowerLegSize+upperLegSize+spineSize-upperArmSize-lowerArmSize),
      angle: rads(90)
    }
  },
  lowerRightArm: {
    assetKey: 'shoulder',
    length: lowerArmSize,
    position: {
      x: OX,
      y: OY-(lowerLegSize+upperLegSize+spineSize-upperArmSize-lowerArmSize),
      angle: rads(90)
    }
  },
  upperLeftArm: {
    assetKey: 'shoulder',
    length: upperArmSize,
    position: {
      x: OX+DBL,
      y: OY-(lowerLegSize+upperLegSize+spineSize-lowerArmSize),
      angle: rads(-90)
    }
  },
  upperRightArm: {
    assetKey: 'shoulder',
    length: upperArmSize,
    position: {
      x: OX,
      y: OY-(lowerLegSize+upperLegSize+spineSize-lowerArmSize),
      angle: rads(-90)
    }
  }
};

// delay: after how many milliseconds should the specified limits be applied
var joints = {
  leftKnee: {
    a: {
      bone: 'lowerLeftLeg',
      pivot: [lowerLegSize/2, 0]
    },
    b: {
      bone: 'upperLeftLeg',
      pivot: [-upperLegSize/2, 0]
    },
    limits: [{min: rads(-90), max: rads(-30), delay: 0}]
  },
  rightKnee: {
    a: {
      bone: 'lowerRightLeg',
      pivot: [lowerLegSize/2, 0]
    },
    b: {
      bone: 'upperRightLeg',
      pivot: [-upperLegSize/2, 0]
    },
    limits: [{min: rads(-25), max: rads(-5), delay: 0}]
  },
  leftPelvis: {
    a: {
      bone: 'upperLeftLeg',
      pivot: [upperLegSize/2, 0]
    },
    b: {
      bone: 'spine',
      pivot: [-spineSize/2, 0]
    },
    limits: [{min: rads(10), max: rads(60), delay: 0}]
  },
  rightPelvis: {
    a: {
      bone: 'upperRightLeg',
      pivot: [upperLegSize/2, 0]
    },
    b: {
      bone: 'spine',
      pivot: [-spineSize/2, 0]
    },
    limits: [{min: rads(-20), max: rads(100), delay: 0}]
  },
  leftShoulder: {
    a: {
      bone: 'upperLeftArm',
      pivot: [-upperArmSize/2, 0]
    },
    b: {
      bone: 'spine',
      pivot: [spineSize/2, tboneSize/2]
    },
    limits: [
      {min: rads(-210), max: rads(-50), delay: 0}
    ]
  },
  rightShoulder: {
    a: {
      bone: 'upperRightArm',
      pivot: [-upperArmSize/2, 0]
    },
    b: {
      bone: 'spine',
      pivot: [spineSize/2, -tboneSize/2]
    },
    limits: [
      {min: rads(40), max: rads(230), delay: 0}
    ]
  },
  leftElbow: {
    a: {
      bone: 'lowerLeftArm',
      pivot: [-lowerArmSize/2, 0]
    },
    b: {
      bone: 'upperLeftArm',
      pivot: [upperArmSize/2, 0]
    },
    limits: [
      {min: rads(-150), max: rads(-30), delay: 0}
    ]
  },
  rightElbow: {
    a: {
      bone: 'lowerRightArm',
      pivot: [-lowerArmSize/2, 0]
    },
    b: {
      bone: 'upperRightArm',
      pivot: [upperArmSize/2, 0]
    },
    limits: [
      {min: rads(30), max: rads(150), delay: 0}
    ]
  },
};

function createBoneSprite(id, assetKey, length) {
  var sprite = game.add.sprite(100, 100, assetKey);
  game.physics.p2.enable(sprite);
  sprite.body.clearShapes();
  sprite.body.addLine(length, 0, 0, 0);
  sprite.body.clearCollision(true, true);
  sprites[id] = sprite;
  return sprite;
}

function createSkeleton(skeleton, joints) {
  for (var boneId in skeleton) {
    var bone = skeleton[boneId];
    var sprite = createBoneSprite(boneId, bone.assetKey, bone.length);
    sprite.body.x = bone.position.x;
    sprite.body.y = bone.position.y;
    sprite.body.rotation = bone.position.angle;
  }
  
  for (var jointId in joints) {
    var joint = joints[jointId];
    var constraint = game.physics.p2.createRevoluteConstraint(sprites[joint.a.bone], joint.a.pivot, sprites[joint.b.bone], joint.b.pivot);
    for (var limitId in joint.limits) {
      var limit = joint.limits[limitId];
      function go(constraint, limit){
        setTimeout(function(){
          constraint.setLimits(limit.min, limit.max);
        }, limit.delay);
      }
      go(constraint, limit);
    }
  }

}

function glueLegs() {

  var leftShoe = game.add.sprite(OX+DBL, OY, 'shoe');
  sprites.leftShoe = leftShoe;
  game.physics.p2.enable(leftShoe);
  leftShoe.body.clearCollision(true, true);
  leftShoe.body.static = true;

  var rightShoe = game.add.sprite(OX, OY, 'shoe');
  sprites.rightShoe = rightShoe;
  game.physics.p2.enable(rightShoe);
  rightShoe.body.clearCollision(true, true);
  rightShoe.body.static = true;

  
  game.physics.p2.createDistanceConstraint(leftShoe, sprites.lowerLeftLeg, 0, [0,0], [-lowerLegSize/2, 0]);
  game.physics.p2.createDistanceConstraint(rightShoe, sprites.lowerRightLeg, 0, [0,0], [-lowerLegSize/2, 0]);
  
}

function addBat() {
  var bat = game.add.sprite(0, 0, 'bat');
  sprites.bat = bat;
  game.physics.p2.enable(bat);
  bat.body.clearCollision(true, true);
  bat.body.setCollisionGroup(C_BAT);
  bat.body.collides([C_BALL, C_GROUND,C_WICKET]);
  bat.body.setMaterial(materials.bat);
  
  // hands together
  game.physics.p2.createDistanceConstraint(
    sprites.lowerLeftArm,
    sprites.lowerRightArm,
    0,
    [lowerArmSize/2, 0],
    [lowerArmSize/2, 0]
  );

  // add bat
  var c = game.physics.p2.createRevoluteConstraint(
    sprites.bat,
    [-batSize/2, 0],
    sprites.lowerLeftArm,
    [lowerArmSize/2, 0]
  );
  c.setLimits(rads(-25), rads(-10));
  is_bat_added=1;
}

function bowled()
{
   //console.log('bold');
   gameover=1;
   sprites.wicket.loadTexture('wicket_dislodged');
}

function hit_wicket()
{
  //console.log('hit_wicket');
  gameover=1;
  sprites.wicket.loadTexture('wicket_dislodged');
}

function addWicket() {
  var wicket = game.add.sprite(OWX, OWY, 'wicket');
  sprites.wicket = wicket;
  game.physics.p2.enable(wicket);
  wicket.body.clearCollision(true, true);
  wicket.body.setCollisionGroup(C_WICKET);
  wicket.body.collides(C_BALL,bowled,this);
  wicket.body.collides(C_BAT,hit_wicket,this);
  wicket.body.static=true;
}

function addGround() {
  var ground = game.add.sprite(0, OY);
  sprites.ground = ground;
  game.physics.p2.enable(ground);
  ground.body.clearShapes();
  ground.body.addPlane();
  ground.body.clearCollision(true, true);
  ground.body.setCollisionGroup(C_GROUND);
  ground.body.collides([C_BAT, C_BALL]);
  ground.body.static = true;
  ground.body.setMaterial(materials.ground);
}

function checkBallGround()
{
  console.log("Ball Collided");
  if(state == BALL_PITCHING)
  {
    collisionBallWithGround = 1;
    sprites.ball.body.velocity.x = 0;
    sprites.ball.body.velocity.y = 0;
    console.log("Ball Collided Pitching");
  }
}

function createBall() {
    var ball = game.add.sprite(900,100, 'ball');
    sprites.ball = ball;
    game.physics.p2.enable(ball);
    ball.body.clearShapes();
    ball.body.addCircle(20);
    ball.body.mass = 0.2;
    ball.body.clearCollision(true, true);
    ball.body.setCollisionGroup(C_BALL);
    ball.body.collides([C_BAT, C_WICKET]);
    ball.body.setMaterial(materials.ball);
    ball.body.collides(C_GROUND,checkBallGround,this);
    return function(vel_x,vel_y){
      no_of_balls=no_of_balls+1;
      ballText.text='No of balls: '+no_of_balls;
      ball.body.x = 900;
      ball.body.y = 100;
      ball.body.velocity.x = vel_x;
      ball.body.velocity.y = vel_y;
    }
}

function createMaterials() {
  materials.bat = game.physics.p2.createMaterial('batMaterial');
  materials.ball = game.physics.p2.createMaterial('ballMaterial');
  materials.ground = game.physics.p2.createMaterial('groundMaterial');

  materials.groundBall = game.physics.p2.createContactMaterial(materials.ground, materials.ball);
  materials.groundBall.restitution = 0.4;
  materials.groundBall.stiffness = 10000000;

  materials.batBall = game.physics.p2.createContactMaterial(materials.bat, materials.ball);
  materials.batBall.restitution = 0.5;
  materials.batBall.stiffness = 10000000;
}

function create(){
 socket = io.connect("http://localhost", {port: 8120, transports: ["websocket"]});
  game.add.image(0, 0, 'sky');

  //  Enable p2 physics
  game.physics.startSystem(Phaser.Physics.P2JS);
  game.physics.p2.setImpactEvents(true);

  console.log(game.physics.p2);
  game.physics.p2.gravity.y = 200;

  // create collision groups
  C_BAT = game.physics.p2.createCollisionGroup();
  C_BALL = game.physics.p2.createCollisionGroup();
  C_GROUND = game.physics.p2.createCollisionGroup();
  C_WICKET = game.physics.p2.createCollisionGroup();

  // create materials
  createMaterials();

  createSkeleton(skeleton, joints);
  glueLegs();
  addGround();
  addWicket();
  ballText = game.add.text(16, 16, 'No of balls: 0', { fontSize: '16px', fill: '#000' });
   gameText = game.add.text(300, 16, 'Game initiated', { fontSize: '16px', fill: '#000' });
  // wait for arms to stabilize before adding bat
  setTimeout(addBat, 1000);
  //setTimeout(startMouseInput, 1500);

  past_time=(new Date()).getTime()-3000;
  bowl=createBall();
  cursors = game.input.keyboard.createCursorKeys();
  setEventHandlers();
}

var setEventHandlers = function() {
    // Socket connection successful
    socket.on("connect", onSocketConnected);

    // Socket disconnection
    socket.on("disconnect", onSocketDisconnect);

    // New player message received
    socket.on("new player", onNewPlayer);

    // Player move message received
    socket.on("move player", onMovePlayer);

    // Player removed message received
    socket.on("remove player", onRemovePlayer);

    //Tell the connected player that he is gonna bat
    socket.on("you are batsman", setBatsman);

    //Tell the connected player that he is gonna bowl
    socket.on("you are bowler",setBowler);

    socket.on("move bat",changeBatPosition);

    socket.on("bowl",startBowl);

    socket.on("simulate",simulate);

    socket.on("reverse roles",reverse);

    socket.on("game finished",finished);
};

function finished(data)
{
  console.log("finished")
    state=GAME_FINISHED;
}

function reverse(data)
{
    if(batsman==1)
    {
      bowler=1;
      batsman=0;
      mouseSprite.destroy();
      mouseSprite=null;
      no_of_balls=0;
      round+=1;
    }
}

function simulate(data)
{
  if(bowler==1)
  {
      simulationMatrix=[];
      simulationMatrix=data.simulation;
      simulationIndex=0;
      state=SIMULATION_RECEIVED;
      while(Math.abs(sprites.ball.body.x - simulationMatrix[simulationIndex].ball_x) > delta || Math.abs(sprites.ball.body.y - simulationMatrix[simulationIndex].ball_y) > delta )
      {
        simulationIndex += 1;
        if(simulationIndex == simulationMatrix.length)
        {
          console.log("yes");
          simulationIndex = 0;
          break;
        }
      }
      console.log("Simulation Index: " + simulationIndex + " Simulation Matrix Length: " + simulationMatrix.length);
  }
}
function startBowl(data)
{ 
  if(batsman==1)
  {
      ballVelX=data.vel_x;
      ballVelY=data.vel_y;
      state=BOWL_RECEIVED;
  }
}
function changeBatPosition(data)
{
    console.log("Bat position changed to "+data.x+" "+data.y);
    if(batsman)
    {
        return;
    }
    else if(is_bat_added==1)
    {
         console.log("Bat is added now set position");
        sprites.bat.x=data.x;
        sprites.bat.y=data.y;
    }
}

// Socket connected
function onSocketConnected() {
    console.log("Connected to socket server");

    // Send local player data to the game server
    socket.emit("new player", {});
};

// Socket disconnected
function onSocketDisconnect() {
    console.log("Disconnected from socket server");
};

// New player
function onNewPlayer(data) {
    console.log("New player connected: "+data.id);
};

// Move player
function onMovePlayer(data) {    
};

// Remove player
function onRemovePlayer(data) {
};

function setBatsman()
{
    console.log("batsman");
    //This means that his status had been earlier set
    //So you can return
    if(batsman||bowler)
    {
        return;
    }
    batsman=1;
    setTimeout(startMouseInput, 1500);
}

function setBowler()
{
    console.log("bowler");
    //This means that his status had been earlier set
    //So you can return
    if(batsman||bowler)
    {
        return;
    }
    bowler=1;
}

function startMouseInput() {
    //If the present player is batsman set the mouse controls
      mouseSprite = game.add.sprite(0, 0, 'ball');
      game.physics.p2.enable(mouseSprite);
      mouseSprite.body.clearCollision(true, true);
      mouseSprite.body.static = true;

      game.physics.p2.createRevoluteConstraint(mouseSprite, [0,0], sprites.bat, [0,0], 500);
      game.input.addMoveCallback(move, this);
}

function move() {
  if (mouseSprite !== null) {
    mouseSprite.body.x = game.input.mousePointer.x;
    mouseSprite.body.y = game.input.mousePointer.y;
  }
}

function update() {
 /* if(gameover==0)
  {
      present_time=(new Date()).getTime();
      if(present_time-past_time>=3000)
      { 
         // bowl();
          past_time=present_time;
      }    
  }
  else if(gameover==1)
  {
      gameover=2;
      sprites.wicket.loadTexture('wicket_dislodged');
      ballText.text="GAME OVER";
  }
  */
  console.log(state);
  if(bowler==1)
  {
      if(state==STATIC)
      {
        gameText.text='Press right key to bowl';
         if (cursors.left.isDown)
         {
            console.log('bowler left is pressed');
            ballVelX = -250;
            ballVelY = Math.floor(Math.random()*500+1);
            socket.emit("bowl",{vel_x: ballVelX, vel_y: ballVelY});
            state=BOWLED;
         }
      }
      if(state==BOWLED)
      {
        gameText.text='Waiting for response';
        bowl(ballVelX,ballVelY);
        state = BALL_PITCHING;
        ballTrajectory = [];
        collisionBallWithGround = 0;
        ballTrajectoryIndex = 0;
      }
      if(state==BALL_PITCHING)
      {
        if(collisionBallWithGround == 0)
        {
          ballTrajectory.push({ballX: sprites.ball.body.x, ballY: sprites.ball.body.y})
          this.r = 0;
          for(var i = 0; i <= 5000000; i++)
          {
            var a = Math.sqrt(i);
            this.r += a * a;
          }
          console.log(this.r);
        }
        else
        {
          if(ballTrajectoryIndex == ballTrajectory.length)
          {
            ballTrajectoryIndex = 0;
          }
          sprites.ball.body.x = ballTrajectory[ballTrajectoryIndex].ballX;
          sprites.ball.body.y = ballTrajectory[ballTrajectoryIndex].ballY;
          ballTrajectoryIndex += 1;
        }
      }
      if(state==SIMULATION_RECEIVED)
      {
          gameText.text='Simulating played shot';
          if(simulationIndex<simulationMatrix.length)
          {
             // console.log(sprites);
              
              //console.log(simulationIndex);
              //console.log(simulationMatrix.length);
              sprites.ball.body.x = simulationMatrix[simulationIndex].ball_x;
              sprites.ball.body.y = simulationMatrix[simulationIndex].ball_y;
              sprites.bat.body.x = simulationMatrix[simulationIndex].bat_x;
              sprites.bat.body.y = simulationMatrix[simulationIndex].bat_y;
              /*sprites.upperLeftArm.body.x=simulationMatrix[simulationIndex].upperLeftArm_x;
              sprites.upperLeftArm.body.y=simulationMatrix[simulationIndex].upperLeftArm_y;
              sprites.upperRightArm.body.x=simulationMatrix[simulationIndex].upperRightArm_x;
              sprites.upperRightArm.body.y=simulationMatrix[simulationIndex].upperRightArm_y;
              sprites.lowerLeftArm.body.x=simulationMatrix[simulationIndex].lowerLeftArm_x;
              sprites.lowerLeftArm.body.y=simulationMatrix[simulationIndex].lowerLeftArm_y;
              sprites.lowerRightArm.body.x=simulationMatrix[simulationIndex].lowerRightArm_x;
              sprites.lowerRightArm.body.y=simulationMatrix[simulationIndex].lowerRightArm_y;
              sprites.upperLeftLeg.body.x=simulationMatrix[simulationIndex].upperLeftLeg_x;
              sprites.upperLeftLeg.body.y=simulationMatrix[simulationIndex].upperLeftLeg_y;
              sprites.upperRightLeg.body.x=simulationMatrix[simulationIndex].upperRightLeg_x;
              sprites.upperRightLeg.body.y=simulationMatrix[simulationIndex].upperRightLeg_y;
              sprites.lowerLeftLeg.body.x=simulationMatrix[simulationIndex].lowerLeftLeg_x;
              sprites.lowerLeftLeg.body.y=simulationMatrix[simulationIndex].lowerLeftLeg_y;
              sprites.lowerRightLeg.body.x=simulationMatrix[simulationIndex].lowerRightLeg_x;
              sprites.lowerRightLeg.body.y=simulationMatrix[simulationIndex].lowerRightLeg_y;
              sprites.spine.body.x=simulationMatrix[simulationIndex].spine_x;
              sprites.spine.body.y=simulationMatrix[simulationIndex].spine_y;
              */
              //sprites=simulationMatrix[simulationIndex];
              simulationIndex += 1;
          }
          else if(simulationIndex==simulationMatrix.length)
          {
              no_of_balls+=1;
              ballText.text='No of balls: '+no_of_balls;
              state=STATIC;
              if(no_of_balls==NO_OF_DELIVIRIES)
              {
                if(round==1)
                {
                   socket.emit('game finished',{});
                   state=GAME_FINISHED; 
                   gameText.text='Game Over';
                }
                else
                {
                  socket.emit("reverse roles",{});
                  batsman=1;
                  bowler=0;
                  startMouseInput();
                  round+=1;
                  no_of_balls=0;
                }
              }
          }
      }
  }
  if(batsman==1)
  {
    if(state==BOWL_RECEIVED)
    {
        gameText.text='Face the delivery';
        bowl(ballVelX,ballVelY);
        simulation_started=(new Date()).getTime();
        state=SIMULATION;
        simulationMatrix=[];
    }
    if(state==SIMULATION)
    {
        var present_simulation=(new Date()).getTime();
        if(present_simulation-simulation_started<=3000)
        {
            var position_object={
              ball_x:sprites.ball.body.x,
              ball_y:sprites.ball.body.y,
              bat_x:sprites.bat.body.x,
              bat_y:sprites.bat.body.y
              //This data was a lot to send even on a local network
              /*upperLeftArm_x:sprites.upperLeftArm.body.x,
              upperLeftArm_y:sprites.upperLeftArm.body.y,
              upperRightArm_x:sprites.upperRightArm.body.x,
              upperRightArm_y:sprites.upperRightArm.body.y,
              lowerLeftArm_x:sprites.lowerLeftArm.body.x,
              lowerLeftArm_y:sprites.lowerLeftArm.body.y,
              lowerRightArm_x:sprites.lowerRightArm.body.x,
              lowerRightArm_y:sprites.lowerRightArm.body.y,
              upperLeftLeg_x:sprites.upperLeftLeg.body.x,
              upperLeftLeg_y:sprites.upperLeftLeg.body.y,
              upperRightLeg_x:sprites.upperRightLeg.body.x,
              upperRightLeg_y:sprites.upperRightLeg.body.y,
              lowerLeftLeg_x:sprites.lowerLeftLeg.body.x,
              lowerLeftLeg_y:sprites.lowerLeftLeg.body.y,
              lowerRightLeg_x:sprites.lowerRightLeg.body.x,
              lowerRightLeg_y:sprites.lowerRightLeg.body.y,
              spine_x:sprites.spine.body.x,
              spine_y:sprites.spine.body.y*/
            }
            console.log(position_object);
            simulationMatrix.push(position_object);
        }
        else
        {
            state=STATIC;
            gameText.text='Waiting for next delivery';
            socket.emit("simulate",{simulation:simulationMatrix});
        }
    }
    if(state==GAME_FINISHED)
    {
        gameText.text='Game Over';
    }
  }
}


</script>

</body>
</html>